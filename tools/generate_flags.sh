#!/bin/bash

# This script is used to uniformly draw 3-letter ISO codes on the side of
# some language icons. It operates by pasting an autogenerated image of
# the 3-letter code over an existing source flag. The 3-letter image is
# generated by using Inkscape's "text to path" conversion function.
#
# To add a new flag that consists of an existing flag with 3-letter code
# on the side, just add another gen_flag line at the end and re-run this
# script.

set -e

confirm_has_dep() {
  if ! which "$1" >/dev/null 2>&1; then
    echo "This tool requires $1, please install it"
    exit 1
  fi
}

confirm_has_font() {
  local fontfamilystyle="$1"
  if ! fc-list : family style|grep -q '^'$fontfamilystyle'$'; then
    echo "This tool requires the font $fontfamilystyle, please install it"
    exit 1
  fi
}

iso_code_svg_template() {
  local iso_code="$1" letter_spacing="$2" font_size="$3"
  cat <<EOF
<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<svg
   width="30"
   height="20"
   viewBox="0 0 30 20"
   version="1.1"
   xmlns="http://www.w3.org/2000/svg"
   xmlns:svg="http://www.w3.org/2000/svg">
  <rect
     style="fill:white"
     width="11"
     height="20"
     x="19"
     y="0" />
  <text
     transform="rotate(-90)"
     style="font-weight:bold;font-size:$font_size;font-family:'Roboto';-inkscape-font-specification:'Roboto, Bold';letter-spacing:$letter_spacing;fill:black;dominant-baseline:middle;text-anchor:middle"
     x="-10"
     y="25.38"
     >$iso_code</text>
</svg>
EOF
}

strip_attr() {
  local attr="$1"
  sed "s/ $1=\"[^\"]\+\"//g"
}

minify_svg() {
  scour --enable-id-stripping \
        --set-precision=5 \
        --no-line-breaks \
        2>/dev/null \
    | strip_attr dominant-baseline \
    | strip_attr aria-label \
    | strip_attr encoding
}

generate_iso_svg() {
  local iso_code="$1" letter_spacing="$2" font_size="$3"
  iso_code_svg_template "$iso_code" "$letter_spacing" "$font_size" \
    | inkscape --export-text-to-path \
               --pipe \
               --export-filename=- \
               --export-type=svg \
    | minify_svg
}

remove_svg_header() {
  tr -d '\n'| sed 's,.*<svg [^>]\+>,,'
}

remove_svg_footer() {
  sed 's,</svg>,,'
}

confirm_has_dep inkscape
confirm_has_dep scour
confirm_has_font "Roboto:style=Bold"

gen_flag() {
  local src="$1" iso_code="$2" \
        letter_spacing="${3:-0px}" font_size="${4:-7.18718pt}"
  local outfile="webroot/img/flags/${iso_code,,}.svg"
  (
    cat "$src" | remove_svg_footer
    generate_iso_svg "$iso_code" "$letter_spacing" "$font_size" \
      | remove_svg_header
  ) | minify_svg > "$outfile"
  echo "Generated $outfile"
}

gen_flag webroot/img/flags/ind.svg AOZ
gen_flag webroot/img/flags/ind.svg JAV
gen_flag webroot/img/flags/ind.svg MDR 0.5px 8.8px
