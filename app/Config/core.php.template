<?php
/**
 * This is core configuration file.
 *
 * Use it to configure core behavior of Cake.
 *
 * PHP versions 4 and 5
 *
 * CakePHP(tm) : Rapid Development Framework (http://cakephp.org)
 * Copyright 2005-2012, Cake Software Foundation, Inc. (http://cakefoundation.org)
 *
 * Licensed under The MIT License
 * Redistributions of files must retain the above copyright notice.
 *
 * @copyright     Copyright 2005-2012, Cake Software Foundation, Inc. (http://cakefoundation.org)
 * @link          http://cakephp.org CakePHP(tm) Project
 * @package       cake
 * @subpackage    cake.app.config
 * @since         CakePHP(tm) v 0.2.9
 * @license       MIT License (http://www.opensource.org/licenses/mit-license.php)
 */

/**
 * CakePHP Debug Level:
 *
 * Production Mode:
 * 	0: No error messages, errors, or warnings shown. Flash messages redirect.
 *
 * Development Mode:
 * 	1: Errors and warnings shown, model caches refreshed, flash messages halted.
 * 	2: As in 1, but also with full debug messages and SQL output.
 *
 * In production mode, flash messages redirect after a time interval.
 * In development mode, you need to click the flash message to continue.
 */
	Configure::write('debug', 1);

/**
 * Configure the Error handler used to handle errors for your application. By default
 * ErrorHandler::handleError() is used. It will display errors using Debugger, when debug > 0
 * and log errors with CakeLog when debug = 0.
 *
 * Options:
 *
 * - `handler` - callback - The callback to handle errors. You can set this to any callable type,
 *   including anonymous functions.
 *   Make sure you add App::uses('MyHandler', 'Error'); when using a custom handler class
 * - `level` - integer - The level of errors you are interested in capturing.
 * - `trace` - boolean - Include stack traces for errors in log files.
 *
 * @see ErrorHandler for more information on error handling and configuration.
 */
  Configure::write('Error', array(
          'handler' => 'ErrorHandler::handleError',
          'level' => E_ALL & ~E_DEPRECATED,
          'trace' => true
  ));

/**
 * Configure the Exception handler used for uncaught exceptions. By default,
 * ErrorHandler::handleException() is used. It will display a HTML page for the exception, and
 * while debug > 0, framework errors like Missing Controller will be displayed. When debug = 0,
 * framework errors will be coerced into generic HTTP errors.
 *
 * Options:
 *
 * - `handler` - callback - The callback to handle exceptions. You can set this to any callback type,
 *   including anonymous functions.
 *   Make sure you add App::uses('MyHandler', 'Error'); when using a custom handler class
 * - `renderer` - string - The class responsible for rendering uncaught exceptions. If you choose a custom class you
 *   should place the file for that class in app/Lib/Error. This class needs to implement a render method.
 * - `log` - boolean - Should Exceptions be logged?
 * - `extraFatalErrorMemory` - integer - Increases memory limit at shutdown so fatal errors are logged. Specify
 *   amount in megabytes or use 0 to disable (default: 4 MB)
 * - `skipLog` - array - list of exceptions to skip for logging. Exceptions that
 *   extend one of the listed exceptions will also be skipped for logging.
 *   Example: `'skipLog' => array('NotFoundException', 'UnauthorizedException')`
 *
 * @see ErrorHandler for more information on exception handling and configuration.
 */
  Configure::write('Exception', array(
          'handler' => 'ErrorHandler::handleException',
          'renderer' => 'ExceptionRenderer',
          'log' => true
  ));

/**
 * CakePHP Log Level:
 *
 * In case of Production Mode CakePHP gives you the possibility to continue logging errors.
 *
 * The following parameters can be used:
 *  Boolean: Set true/false to activate/deactivate logging
 *    Configure::write('log', true);
 *
 *  Integer: Use built-in PHP constants to set the error level (see error_reporting)
 *    Configure::write('log', E_ERROR | E_WARNING);
 *    Configure::write('log', E_ALL ^ E_NOTICE);
 */
	Configure::write('log', true);

/**
 * Application wide charset encoding
 */
	Configure::write('App.encoding', 'UTF-8');

/**
 * To configure CakePHP *not* to use mod_rewrite and to
 * use CakePHP pretty URLs, remove these .htaccess
 * files:
 *
 * /.htaccess
 * /app/.htaccess
 * /app/webroot/.htaccess
 *
 * And uncomment the App.baseUrl below:
 */
	//Configure::write('App.baseUrl', env('SCRIPT_NAME'));

/**
 * Uncomment the define below to use CakePHP prefix routes.
 *
 * The value of the define determines the names of the routes
 * and their associated controller actions:
 *
 * Set to an array of prefixes you want to use in your application. Use for
 * admin or other prefixed routes.
 *
 * 	Routing.prefixes = array('admin', 'manager');
 *
 * Enables:
 *	`admin_index()` and `/admin/controller/index`
 *	`manager_index()` and `/manager/controller/index`
 *
 * [Note Routing.admin is deprecated in 1.3.  Use Routing.prefixes instead]
 */
	//Configure::write('Routing.prefixes', array('admin'));

/**
 * Turn off all caching application-wide.
 *
 */
	//Configure::write('Cache.disable', true);

/**
 * Enable cache checking.
 *
 * If set to true, for view caching you must still use the controller
 * var $cacheAction inside your controllers to define caching settings.
 * You can either set it controller-wide by setting var $cacheAction = true,
 * or in each action using $this->cacheAction = true.
 *
 */
	//Configure::write('Cache.check', true);

/**
 * Defines the default error type when using the log() function. Used for
 * differentiating error logging and debugging. Currently PHP supports LOG_DEBUG.
 */
	define('LOG_ERROR', 1);

/**
 * The preferred session handling method. Valid values:
 *
 * 'php'	 		Uses settings defined in your php.ini.
 * 'cake'		Saves session files in CakePHP's /tmp directory.
 * 'database'	Uses CakePHP's database sessions.
 *
 * To define a custom session handler, save it at /app/config/<name>.php.
 * Set the value of 'Session.save' to <name> to utilize it in CakePHP.
 *
 * To use database sessions, run the app/config/schema/sessions.php schema using
 * the cake shell command: cake schema create Sessions
 *
 */
	Configure::write('Session.save', 'php');

/**
 * The model name to be used for the session model.
 *
 * 'Session.save' must be set to 'database' in order to utilize this constant.
 *
 * The model name set here should *not* be used elsewhere in your application.
 */
	//Configure::write('Session.model', 'Session');

/**
 * The name of the table used to store CakePHP database sessions.
 *
 * 'Session.save' must be set to 'database' in order to utilize this constant.
 *
 * The table name set here should *not* include any table prefix defined elsewhere.
 *
 * Please note that if you set a value for Session.model (above), any value set for
 * Session.table will be ignored.
 *
 * [Note: Session.table is deprecated as of CakePHP 1.3]
 */
	//Configure::write('Session.table', 'cake_sessions');

/**
 * The DATABASE_CONFIG::$var to use for database session handling.
 *
 * 'Session.save' must be set to 'database' in order to utilize this constant.
 */
	//Configure::write('Session.database', 'default');

/**
 * The name of CakePHP's session cookie.
 *
 * Note the guidelines for Session names states: "The session name references
 * the session id in cookies and URLs. It should contain only alphanumeric
 * characters."
 * @link http://php.net/session_name
 */
	Configure::write('Session.cookie', 'CAKEPHP');

/**
 * Session time out time (in seconds).
 * Actual value depends on 'Security.level' setting.
 */
	Configure::write('Session.timeout', '120');

/**
 * If set to false, sessions are not automatically started.
 */
	Configure::write('Session.start', true);

/**
 * When set to false, HTTP_USER_AGENT will not be checked
 * in the session. You might want to set the value to false, when dealing with
 * older versions of IE, Chrome Frame or certain web-browsing devices and AJAX
 */
	Configure::write('Session.checkAgent', true);

/**
 * The level of CakePHP security. The session timeout time defined
 * in 'Session.timeout' is multiplied according to the settings here.
 * Valid values:
 *
 * 'high'   Session timeout in 'Session.timeout' x 10
 * 'medium' Session timeout in 'Session.timeout' x 100
 * 'low'    Session timeout in 'Session.timeout' x 300
 *
 * CakePHP session IDs are also regenerated between requests if
 * 'Security.level' is set to 'high'.
 */
	Configure::write('Security.level', 'medium');

/**
 * A random string used in security hashing methods.
 */
	Configure::write('Security.salt', 'ze@9422#5dS?!99xx');

/**
 * A random numeric string (digits only) used to encrypt/decrypt strings.
 */
	Configure::write('Security.cipherSeed', '250421158228394183472272710455');

/**
 * Apply timestamps with the last modified time to static assets (js, css, images).
 * Will append a querystring parameter containing the time the file was modified. This is
 * useful for invalidating browser caches.
 *
 * Set to `true` to apply timestamps when debug > 0. Set to 'force' to always enable
 * timestamping regardless of debug value.
 */
	Configure::write('Asset.timestamp', 'force');
/**
 * Compress CSS output by removing comments, whitespace, repeating tags, etc.
 * This requires a/var/cache directory to be writable by the web server for caching.
 * and /vendors/csspp/csspp.php
 *
 * To use, prefix the CSS link URL with '/ccss/' instead of '/css/' or use HtmlHelper::css().
 */
	//Configure::write('Asset.filter.css', 'css.php');

/**
 * Plug in your own custom JavaScript compressor by dropping a script in your webroot to handle the
 * output, and setting the config below to the name of the script.
 *
 * To use, prefix your JavaScript link URLs with '/cjs/' instead of '/js/' or use JavaScriptHelper::link().
 */
	//Configure::write('Asset.filter.js', 'custom_javascript_output_filter.php');

/**
 * The classname and database used in CakePHP's
 * access control lists.
 */
	Configure::write('Acl.classname', 'DbAcl');
	Configure::write('Acl.database', 'default');

/**
 * If you are on PHP 5.3 uncomment this line and correct your server timezone
 * to fix the date & time related errors.
 */
	//date_default_timezone_set('UTC');

/**
 *
 * Cache Engine Configuration
 * Default settings provided below
 *
 * File storage engine.
 *
 * 	 Cache::config('default', array(
 *		'engine' => 'File', //[required]
 *		'duration'=> 3600, //[optional]
 *		'probability'=> 100, //[optional]
 * 		'path' => CACHE, //[optional] use system tmp directory - remember to use absolute path
 * 		'prefix' => 'cake_', //[optional]  prefix every cache file with this string
 * 		'lock' => false, //[optional]  use file locking
 * 		'serialize' => true, [optional]
 *	));
 *
 *
 * APC (http://pecl.php.net/package/APC)
 *
 * 	 Cache::config('default', array(
 *		'engine' => 'Apc', //[required]
 *		'duration'=> 3600, //[optional]
 *		'probability'=> 100, //[optional]
 * 		'prefix' => Inflector::slug(APP_DIR) . '_', //[optional]  prefix every cache file with this string
 *	));
 *
 *
 * Xcache (http://xcache.lighttpd.net/)
 *
 * 	 Cache::config('default', array(
 *		'engine' => 'Xcache', //[required]
 *		'duration'=> 3600, //[optional]
 *		'probability'=> 100, //[optional]
 * 		'prefix' => Inflector::slug(APP_DIR) . '_', //[optional] prefix every cache file with this string
 *		'user' => 'user', //user from xcache.admin.user settings
 *      'password' => 'password', //plaintext password (xcache.admin.pass)
 *	));
 *
 *
 * Memcache (http://www.danga.com/memcached/)
 *
 * 	 Cache::config('default', array(
 *		'engine' => 'Memcache', //[required]
 *		'duration'=> 3600, //[optional]
 *		'probability'=> 100, //[optional]
 * 		'prefix' => Inflector::slug(APP_DIR) . '_', //[optional]  prefix every cache file with this string
 * 		'servers' => array(
 * 			'127.0.0.1:11211' // localhost, default port 11211
 * 		), //[optional]
 * 		'compress' => false, // [optional] compress data in Memcache (slower, but uses less memory)
 * 		'persistent' => true, // [optional] set this to false for non-persistent connections
 *	));
 *
 */
    Cache::config('default', array('engine' => 'File'));



/* *************************************************** */
/*                                                     */
/*   From here, the config more specific to Tatoeba.   */
/*                                                     */
/* *************************************************** */

/**
 * Defining some paths. IF you want your dev version to use the
 * CSS, JAvascript, images and audio from Tatoeba rather than from
 * your machine, then use the following:
 *
 * define("CSS_PATH", "http://css.tatoeba.org/css/");
 * define("JS_PATH", "http://js.tatoeba.org/js/");
 * define("IMG_PATH", "http://flags.tatoeba.org/img/");
 */
    define("TATOEBA_DOMAIN", "localhost"); // used for cookie domain
    define("CSS_PATH", "");
    define("JS_PATH", "");
    define("IMG_PATH", "");
	// TODO We probably want to change the above to use Configure::write() instead of define()

/**
 * Recordings paths. They should end with a directory separator character (/).
 * The web server must serve <Recordings.path> under <Recordings.url>.
 * Admins may import audio files located in <Recordings.uploadPath>, in which
 * the webserver must have write access.
 */
    Configure::write('Recordings.url', 'https://example.com/sentences/');
    Configure::write('Recordings.path', '/sentences/audio/files/');
    Configure::write('Recordings.importPath', '/audio/files/to/import/');


/**
 * For email notifications.
 * Cf. app/controllers/components/mailer.php
 */
    Configure::write('Mailer.enabled', false);
    Configure::write('Mailer.username', 'some.random.gmail.address@gmail.com');
    Configure::write('Mailer.password', 'some.password');

/**
 * Enable or disable external tools.
 * - Set Search.enabled to false if you don't have Sphinx installed.
 * - Set AutoTranscriptions.enabled to false if you don't have the
 *   various transcription tools installed, or if you simply don't
 *   want to have transcriptions automatically generated for new
 *   sentences.
 */
    Configure::write('Search.enabled', false);
    Configure::write('AutoTranscriptions.enabled', false);

/**
 * Stylesheet for development website
 */
    Configure::write('Tatoeba.devStylesheet', false);

/**
 * Blocked IP addresses. Should be an array of strings containing the
 * IP's you want to block. For instance:
 *
 *    array (
 *      "1.2.3.4",
 *      "5.6.7.8",
 *      "9.10.11.12"
 *    )
 *
 * Cf. app/app_controller.php
 */
    Configure::write('Tatoeba.blockedIP', array());

/**
 * Google Analytics.
 * - Leave GoogleAnalytics.enabled to false if you don't want to
 *   include the Google Analytics code.
 * - If you do set GoogleAnalytics.enabled to true, then enter
 *   the id for your Google Analytics account.
 */
    Configure::write('GoogleAnalytics.enabled', false);
    Configure::write('GoogleAnalytics.id', '');

/**
 * Languages of the interface.
 *
 * Each item in the UI.languages is an array of 3 items:
 *   [0] The URL language code. It should match a 'locale' folder.
 *   [1] Optionnal region or script, as explained in
 *       http://www.w3.org/International/articles/language-tags/
 *       Most of the case, you can leave this to null.
 *   [2] This is the name of the language. The name must be in the
 *       language itself, so that people who speak that language can
 *       recognize it.
 */
    Configure::write('UI.languages', array(
        array('ara', null, 'العربية'),
        array('aze', null, 'Azərbaycanca'),
        array('bel', null, 'Беларуская'),
        array('ben', null, 'বাংলা'),
        array('bre', null, 'Brezhoneg'),
        array('cat', null, 'Català'),
        array('ces', null, 'Čeština'),
        array('cmn', 'Hans', '中文', array('chi')),
        array('cym', null, 'Cymraeg'),
        array('dan', null, 'Dansk'),
        array('deu', null, 'Deutsch'),
        array('eng', null, 'English'),
        array('epo', null, 'Esperanto'),
        array('est', null, 'Eesti'),
        array('eus', null, 'Euskara'),
        array('fin', null, 'Suomi'),
        array('fra', null, 'Français', array('fre')),
        array('fry', null, 'Frysk'),
        array('glg', null, 'Galego'),
        array('ell', null, 'Ελληνικά', array('gre')),
        array('hin', null, 'हिन्दी'),
        array('hun', null, 'Magyar'),
        array('ina', null, 'Interlingua'),
        array('ind', null, 'Bahasa Indonesia'),
        array('ita', null, 'Italiano'),
        array('jbo', null, 'Lojban'),
        array('jpn', null, '日本語'),
        array('kat', null, 'ქართული'),
        array('kor', null, '한국어'),
        array('lat', null, 'Latina'),
        array('lit', null, 'Lietuvių'),
        array('mar', null, 'मराठी'),
        array('nld', null, 'Nederlands'),
        array('nds', null, 'Plattdüütsch'),
        array('oci', null, 'Occitan'),
        array('pol', null, 'Polski'),
        array('por', 'BR', 'Português (Brasil)', array('pt_BR')),
        array('ron', null, 'Română'),
        array('rus', null, 'Русский'),
        array('spa', null, 'Español'),
        array('swe', null, 'Svenska'),
        array('tgl', null, 'Tagalog'),
        array('tur', null, 'Türkçe'),
        array('ukr', null, 'Українська'),
        array('uzb', null, 'Oʻzbekcha'),
        array('vie', null, 'Tiếng Việt'),
        array('zsm', null, 'Bahasa Melayu'),
    ));

/**
 * Ids of users (bots) whose comments are hidden from homepage and index page
 * to prevent spam.
 */
    Configure::write('Bots.userIds', array());

/**
 * Announcement message displayed below the search bar. This should be used when
 * we want some information or message to have higher visibility, and not just
 * something that will be noticed mostly by regular members who read the Wall.
 *
 * The message of the announcement has to be set in
 *  /app/views/elements/announcement.ctp
 */
    Configure::write('Announcement.enabled', false);
